package ru.job4j.dao.postgres;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ru.job4j.dao.DAOConfigurationException;
import ru.job4j.dao.DAOException;
import ru.job4j.dao.Order;
import ru.job4j.domain.Item;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.util.List;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.Comparator;

/**
 * PostgresOrder.
 * При добавлении новых строк в postgres, выходила ошибка
 * "Returning autogenerated keys is only supported for 8.2 and later servers".
 * По этой причине сделал не много по другому.
 *
 * @author Stanislav (376825@mail.ru)
 * @since 04.12.2017
 */
public class PostgresOrder implements Order {
    private static final Logger LOG = LoggerFactory.getLogger(PostgresOrder.class);
    private PostgresFactory factory = PostgresFactory.getInstance();

    @Override
    public Item add(Item item)  throws DAOException {
        try (Connection con = this.factory.getConnection()) {
            String sql = "INSERT INTO public.request (name, description, created) VALUES (?, ?, ?) RETURNING id";
            PreparedStatement st = con.prepareStatement(sql);
            st.setString(1, item.getName());
            st.setString(2, item.getDesc());
            st.setTimestamp(3, new Timestamp(item.getCreated()));
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                item.setId(String.valueOf(rs.getInt("id")));
            }

            rs.close();
            st.close();

            ArrayList<String> comments = item.getComments();
            if (comments.size() > 0) {
                sql = "INSERT INTO public.comments (comment, request_id) VALUES (?, ?)";
                st = con.prepareStatement(sql);

                for (String comment : comments) {
                    st.setString(1, comment);
                    st.setString(2, item.getId());
                    st.addBatch();
                }

                st.executeBatch();
                st.close();
            }
        } catch (SQLException e) {
            throw new DAOException("Cannot add item", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }

        return item;
    }

    @Override
    public List<Item> getAll() throws DAOException {
        TreeMap<String, Item> map = new TreeMap<>(Comparator.comparingInt(Integer::valueOf));

        try (Connection con = this.factory.getConnection()) {
            String sql = "SELECT request.id, request.name, request.description, request.created, "
                    + "comments.comment FROM public.request AS request LEFT OUTER JOIN public.comments AS comments "
                    + "ON request.id = comments.request_id ORDER BY request.id, comments.id ";
            PreparedStatement st = con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String name = rs.getString("name");
                String description = rs.getString("description");
                long created = rs.getTimestamp("created").getTime();

                Item item = map.get(id);

                if (item == null) {
                    item = new Item(id, name, description, created);
                    map.put(id, item);
                }

                item.setComments(rs.getString("comment"));
            }

            rs.close();
            st.close();
        } catch (SQLException e) {
            throw new DAOException("Cannot get all items", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }

        return new ArrayList<>(map.values());
    }

    @Override
    public Item findById(String idArgument) throws DAOException {
        Item result = null;

        try (Connection con = this.factory.getConnection()) {
            String sql = "SELECT request.id, request.name, request.description, request.created, "
                    + "comments.comment FROM public.request AS request LEFT OUTER JOIN public.comments AS comments "
                    + "ON request.id = comments.request_id WHERE request.id = ? ORDER BY request.id, comments.id ";
            PreparedStatement st = con.prepareStatement(sql);
            st.setInt(1, Integer.valueOf(idArgument));
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                if (result == null) {
                    String id = String.valueOf(rs.getInt("id"));
                    String name = rs.getString("name");
                    String description = rs.getString("description");
                    long created = rs.getTimestamp("created").getTime();
                    result = new Item(id, name, description, created);
                }

                result.setComments(rs.getString("comment"));
            }

            rs.close();
            st.close();
        } catch (SQLException e) {
            throw new DAOException("Cannot find by id item", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }

        return result;
    }

    @Override
    public List<Item> findByName(String key) throws DAOException {
        TreeMap<String, Item> map = new TreeMap<>(Comparator.comparingInt(Integer::valueOf));

        try (Connection con = this.factory.getConnection()) {
            String sql = "SELECT request.id, request.name, request.description, request.created, "
                    + "comments.comment FROM public.request AS request LEFT OUTER JOIN public.comments AS comments "
                    + "ON request.id = comments.request_id WHERE request.name LIKE ? ORDER BY request.id, comments.id";
            PreparedStatement st = con.prepareStatement(sql);
            st.setString(1, key);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String name = rs.getString("name");
                String description = rs.getString("description");
                long created = rs.getTimestamp("created").getTime();

                Item item = map.get(id);

                if (item == null) {
                    item = new Item(id, name, description, created);
                    map.put(id, item);
                }

                item.setComments(rs.getString("comment"));
            }

            rs.close();
            st.close();
        } catch (SQLException e) {
            throw new DAOException("Cannot find by name item", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }

        return new ArrayList<>(map.values());
    }

    @Override
    public void delete(Item item) throws DAOException {
        try (Connection con = this.factory.getConnection()) {
            String sql = "DELETE FROM public.comments WHERE request_id = ?";
            PreparedStatement st = con.prepareStatement(sql);
            st.setInt(1, Integer.valueOf(item.getId()));
            st.execute();
            st.close();

            sql = "DELETE FROM public.request WHERE id = ?";
            st = con.prepareStatement(sql);
            st.setInt(1, Integer.valueOf(item.getId()));
            st.execute();
            st.close();
        } catch (SQLException e) {
            throw new DAOException("Cannot delete item", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }
    }

    @Override
    public void update(Item item) throws DAOException {
        try (Connection con = this.factory.getConnection()) {
            String sql = "UPDATE request SET name = ?, description = ? WHERE id = ?";
            PreparedStatement st = con.prepareStatement(sql);
            st.setString(1, item.getName());
            st.setString(2, item.getDesc());
            st.setInt(3, Integer.valueOf(item.getId()));
            st.execute();
            st.close();
        } catch (SQLException e) {
            throw new DAOException("Cannot update item", e);
        } catch (DAOConfigurationException e) {
            throw new DAOException("When initializing tables, a script execution error occurred", e);
        }
    }
}